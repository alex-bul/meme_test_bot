import random

from vk_api.keyboard import VkKeyboard, VkKeyboardColor


class Quiz:
    def __init__(self, vk, send_message, end_keyboard):
        self.vk = vk
        self.send_message = send_message
        self.end_keyboard = end_keyboard

        self.users_steps = {}
        self.questions = [
            self.pancakes,
            self.guess_button,
            self.is_like_live,
            self.live_place,
            self.investing,
            self.pay_or_bad_results,
            self.part_in_vezdekod,
            self.danya
        ]

    def is_user_in_quiz(self, user_id):
        return user_id in self.users_steps

    def delete_user(self, user_id):
        return self.users_steps.pop(user_id, '')

    @staticmethod
    def add_stop_button(keyboard):
        keyboard.add_line()
        keyboard.add_button('–í—ã–π—Ç–∏ –∏–∑ —Ç–µ—Å—Ç–∞', payload=['stop_test'])
        return keyboard

    def send_error(self, user_id, error_text, keyboard='default'):
        if keyboard == 'default':
            keyboard = self.end_keyboard
        self.send_message(user_id, error_text,
                          keyboard=keyboard)

    def send_error_of_old(self, user_id):
        self.send_error(user_id, "–≠—Ç–æ—Ç —Ç–µ—Å—Ç —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª :(\n–ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ!")

    def start(self, user_id):
        self.users_steps[user_id] = 0
        self.next(user_id)

    def next(self, user_id):
        try:
            step = self.users_steps[user_id]
        except KeyError:
            self.send_error_of_old(user_id)
            return
        if step < len(self.questions):
            self.questions[step](user_id)
            self.users_steps[user_id] += 1
        else:
            self.end(user_id)

    def end(self, user_id):
        results = [
            '–í—ã –ø–æ—Ç—Ä—è—Å—è—é—â–∏–π —á–µ–ª–æ–≤–µ–∫!',
            '–ü–æ—Ö–æ–∂–µ, –≤—ã –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –ª—é–¥–µ–π!',
            '–í–∞—à–∞ –∂–∏–∑–Ω—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω–∞ –∏ —É –≤–∞—Å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!',
            '–£ –≤–∞—Å —Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ –±—É–¥—É—â–µ–µ!',
            '–ü–µ—Ç—Ä 1 –≥–æ—Ä–¥–∏–ª—Å—è –±—ã –≤–∞–º–∏...',
            '–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç. –ó–∞—Å–∫–∞–º–∏–ª–∏ –º–∞–º–æ–Ω—Ç–∞'
        ]
        self.send_message(user_id, f'–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω ‚ù§\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{random.choice(results)}',
                          keyboard=self.end_keyboard)
        self.delete_user(user_id)

    def is_like_live(self, user_id):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–î–∞', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('–ù–µ—Ç', color=VkKeyboardColor.NEGATIVE)
        keyboard.add_line()
        keyboard.add_openlink_button('–ß—Ç–æ —Ç–∞–∫–æ–µ –∂–∏–∑–Ω—å?',
                                     link='https://ru.wikipedia.org/wiki/%D0%96%D0%B8%D0%B7%D0%BD%D1%8C')
        keyboard = self.add_stop_button(keyboard).get_keyboard()

        self.send_message(user_id, '–í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–∞ –∂–∏–∑–Ω—å?', keyboard=keyboard)

    def live_place(self, user_id):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–í –ª–µ—Å—É')
        keyboard.add_button('–ù–∞ —Ç–µ–ø–ª–æ—Ç—Ä–∞—Å—Å–µ')
        keyboard.add_line()
        keyboard.add_button('–Ø –∂–∏–≤—É –Ω–µ –Ω–∞ –ó–µ–º–ª–µ')
        keyboard.add_line()
        keyboard.add_location_button()
        keyboard = self.add_stop_button(keyboard).get_keyboard()

        self.send_message(user_id, '–ì–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?', keyboard=keyboard)

    def investing(self, user_id):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–°–ë–ï–†', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('–ì–∞–∑–ø—Ä–æ–º', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ù–æ—Ä–Ω–∏–∫–µ–ª—å')
        keyboard.add_button('–†–æ—Å–Ω–µ—Ñ—Ç—å', color=VkKeyboardColor.NEGATIVE)
        keyboard = self.add_stop_button(keyboard).get_keyboard()

        self.send_message(user_id, '–í –∫–∞–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é –≤—ã –±—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏?', keyboard=keyboard)

    def pay_or_bad_results(self, user_id):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–ù–µ—Ç.', color=VkKeyboardColor.NEGATIVE)
        keyboard.add_button('–í—ã —Å–∫–∞–º–µ—Ä—ã')
        keyboard.add_line()
        keyboard.add_vkpay_button(hash='action=transfer-to-group&group_id=212547314')
        keyboard.add_line()
        keyboard.add_button('–Ø –∑–∞–ø–ª–∞—Ç–∏–ª', color=VkKeyboardColor.POSITIVE)
        keyboard = self.add_stop_button(keyboard).get_keyboard()

        self.send_message(user_id, '–•–æ—Ç–∏—Ç–µ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞? –ó–∞–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞–º. (—à—É—Ç–∫–∞ üôÉ)', keyboard=keyboard)

    def part_in_vezdekod(self, user_id):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–î–∞', color=VkKeyboardColor.POSITIVE)
        keyboard.add_line()
        keyboard.add_vkapps_button(app_id=7543093, label='–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ', hash='', owner_id=197700721)
        keyboard = self.add_stop_button(keyboard).get_keyboard()

        self.send_message(user_id, '–£—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –≤–µ–∑–¥–µ–∫–æ–¥–µ?', keyboard=keyboard)

    def guess_button(self, user_id):
        true_button = random.randint(1, 6)

        keyboard = VkKeyboard(inline=True)
        keyboard.add_callback_button('–≠—Ç–∞', payload=(["true"] if true_button == 1 else ["false"]))
        keyboard.add_callback_button('–≠—Ç–∞', payload=(["true"] if true_button == 2 else ["false"]))
        keyboard.add_callback_button('–≠—Ç–∞', payload=(["true"] if true_button == 3 else ["false"]))
        keyboard.add_line()
        keyboard.add_callback_button('–≠—Ç–∞', payload=(["true"] if true_button == 4 else ["false"]))
        keyboard.add_callback_button('–≠—Ç–∞', payload=(["true"] if true_button == 5 else ["false"]))
        keyboard.add_callback_button('–≠—Ç–∞', payload=(["true"] if true_button == 6 else ["false"]))
        keyboard = self.add_stop_button(keyboard).get_keyboard()

        self.send_message(user_id, '–£–≥–∞–¥–∞–µ—Ç–µ –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—á–∞—è? üòé',
                          keyboard=keyboard)

    def pancakes(self, user_id):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–ù–µ –µ—Å—Ç—å –±–ª–∏–Ω—ã', color=VkKeyboardColor.NEGATIVE)
        keyboard.add_button('–°–≥—É—â–µ–Ω–∫–∞')
        keyboard.add_button('–ú–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ')
        keyboard.add_line()
        keyboard.add_button('–¢–≤–æ—Ä–æ–≥')
        keyboard.add_button('–°–º–µ—Ç–∞–Ω–∞')
        keyboard.add_button('–í–∞—Ä–µ–Ω—å–µ')
        keyboard = self.add_stop_button(keyboard).get_keyboard()

        self.send_message(user_id, '–° —á–µ–º –µ—Å—Ç—å –±–ª–∏–Ω—ã?', keyboard=keyboard)

    def danya(self, user_id):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–ê–ª–µ–∫—Å–∞—Ö–∏–Ω', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–†—É–±—Ü–æ–≤', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ó–∞—Ö–∞—Ä—å–µ–≤', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–†–∞—Å—Ç–æ—Ä–≥—É–µ–≤', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å', color=VkKeyboardColor.PRIMARY)

        keyboard = self.add_stop_button(keyboard).get_keyboard()

        self.send_message(user_id, '–ö–∞–∫–∞—è —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É –î–∞–Ω–∏?', keyboard=keyboard)
